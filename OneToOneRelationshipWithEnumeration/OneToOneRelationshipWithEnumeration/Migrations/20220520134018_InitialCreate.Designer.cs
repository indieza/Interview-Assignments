// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneToOneRelationshipWithEnumeration.Data;

#nullable disable

namespace OneToOneRelationshipWithEnumeration.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220520134018_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.BaseUserAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserActionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseUserAction");
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.UserAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseUserActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserActionId")
                        .IsUnique()
                        .HasFilter("[BaseUserActionId] IS NOT NULL");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.FollowUserAction", b =>
                {
                    b.HasBaseType("OneToOneRelationshipWithEnumeration.Models.BaseUserAction");

                    b.Property<string>("FollowMessage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("FollowUserActions", (string)null);
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.UnfollowUserAction", b =>
                {
                    b.HasBaseType("OneToOneRelationshipWithEnumeration.Models.BaseUserAction");

                    b.Property<string>("UnfollowMessage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("UnfollowUserActions", (string)null);
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.UserAction", b =>
                {
                    b.HasOne("OneToOneRelationshipWithEnumeration.Models.BaseUserAction", "BaseUserAction")
                        .WithOne("UserAction")
                        .HasForeignKey("OneToOneRelationshipWithEnumeration.Models.UserAction", "BaseUserActionId");

                    b.Navigation("BaseUserAction");
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.FollowUserAction", b =>
                {
                    b.HasOne("OneToOneRelationshipWithEnumeration.Models.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("OneToOneRelationshipWithEnumeration.Models.FollowUserAction", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.UnfollowUserAction", b =>
                {
                    b.HasOne("OneToOneRelationshipWithEnumeration.Models.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("OneToOneRelationshipWithEnumeration.Models.UnfollowUserAction", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneToOneRelationshipWithEnumeration.Models.BaseUserAction", b =>
                {
                    b.Navigation("UserAction")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
